#!/usr/bin/env ruby
require 'nokogiri'
require 'optparse'
require_relative 'lib/knot'
include Knot

def debug_grid(doc, svg, grid)
  Nokogiri::XML::Node.new 'g', doc do |g|
    svg.add_child g
    g[:fill] = 'white'

    grid.each do |a|
      Nokogiri::XML::Node.new 'circle', doc do |circle|
        g.add_child circle
        circle[:cx] = a.c.x
        circle[:cy] = a.c.y
        circle[:r] = 1
      end
    end
  end

  Nokogiri::XML::Node.new 'g', doc do |g|
    svg.add_child g
    g[:fill] = 'cyan'

    grid.each do |a|
      a.i.each do |k, v|
        Nokogiri::XML::Node.new 'circle', doc do |circle|
          g.add_child circle
          circle[:cx] = v.x
          circle[:cy] = v.y
          circle[:r] = 1
        end
      end
    end

    grid.each do |a|
      a.o.each do |k, v|
        Nokogiri::XML::Node.new 'circle', doc do |circle|
          g.add_child circle
          circle[:cx] = v.x
          circle[:cy] = v.y
          circle[:r] = 1
        end
      end
    end
  end
end

options = {
  vertical: 2,
  horizontal: 2,
  grid_size: 96,
  knot_color: 'white',
  knot_width: 24,
  stroke_color: 'black',
  stroke_width: 8,
  debug: false,
}
OptionParser.new do |opts|
  opts.banner = "Usage: ./knot [options]"

  opts.on("-h", "--help", "Prints this help.") do
    puts opts
    exit
  end

  opts.on("-d", "--debug", "Draw the grid points.") do
    options[:debug] = true
  end

  opts.on("-VVERTICAL", "--vertical=VERTICAL", "Number of cells vertically.") do |opt|
    options[:vertical] = opt
  end

  opts.on("-HHORIZONTAL", "--horizontal=HORIZONTAL", "Number of cells horizontally.") do |opt|
    options[:horizontal] = opt
  end

  opts.on("-GGRID_SIZE", "--grid-size=GRID_SIZE", "Dimensions of each cell in the grid.") do |opt|
    options[:grid_size] = opt
  end

  opts.on("-bBG_COLOR", "--background-color=BG_COLOR", "Background colour.") do |opt|
    options[:background_color] = opt
  end

  opts.on("-kKNOT_COLOR", "--knot-color=KNOT_COLOR", "Knot colour.") do |opt|
    options[:knot_color] = opt
  end

  opts.on("-KKNOT_WIDTH", "--knot-width=KNOT_WIDTH", "Knot width.") do |opt|
    options[:knot_width] = opt
  end

  opts.on("-sSTROKE_COLOR", "--stroke-color=STROKE_COLOR", "Stroke colour.") do |opt|
    options[:stroke_color] = opt
  end

  opts.on("-SSTROKE_WIDTH", "--stroke-width=STROKE_WIDTH", "Stroke width.") do |opt|
    options[:stroke_width] = opt
  end
end.parse!

ROWS = options[:vertical].to_i * 2 + 1
COLS = options[:horizontal].to_i * 2 + 1
GRIDSIZE = options[:grid_size].to_i
W = GRIDSIZE * COLS
H = GRIDSIZE * ROWS

grid = Grid.build(ROWS, COLS) do |i, j|
  c = Point[GRIDSIZE * j + GRIDSIZE / 2,
            GRIDSIZE * i + GRIDSIZE / 2]

  Cell.new(c, options[:knot_width].to_i,
           options[:stroke_width].to_i)
end
doc = Nokogiri::XML::Document.new

Nokogiri::XML::Node.new 'svg', doc do |svg|
  doc.add_child svg
  svg[:xmlns] = 'http://www.w3.org/2000/svg'
  svg[:viewBox] = "0 0 #{W} #{H}"
  svg[:width] = W
  svg[:height] = H

  bg_d = "M0,0 v#{H} h#{W} v-#{H} z";

  # Background.
  Nokogiri::XML::Node.new 'path', doc do |path|
    svg.add_child path
    path[:d] = bg_d
    path[:fill] = options[:background_color]
  end if options[:background_color]

  # Stroke Mask
  Nokogiri::XML::Node.new 'mask', doc do |mask|
    svg.add_child mask
    mask[:id] = 'strokeMask'

    Nokogiri::XML::Node.new 'path', doc do |path|
      mask.add_child path
      path[:d] = bg_d
      path[:fill] = 'white'
    end

    # Mask
    Nokogiri::XML::Node.new 'path', doc do |path|
      mask.add_child path
      path[:d] = Knot.draw_mask grid
      path[:fill] = 'black'
    end
  end


  # Outline stroke
  Nokogiri::XML::Node.new 'g', doc do |g|
    svg.add_child g
    g[:fill] = options[:stroke_color]
    g[:mask] = 'url(#strokeMask)'

    Nokogiri::XML::Node.new 'path', doc do |path|
      g.add_child path
      path[:d] = Knot.draw_outline grid
    end
  end

  # Knot line
  Nokogiri::XML::Node.new 'g', doc do |g|
    svg.add_child g
    g[:fill] = options[:knot_color]

    Nokogiri::XML::Node.new 'path', doc do |path|
      g.add_child path
      path[:d] = Knot.draw_knot grid
    end
  end

  debug_grid doc, svg, grid if options[:debug]
end

puts doc.to_xml indent:2
